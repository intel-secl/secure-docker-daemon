diff --git a/components/cli/cli/command/image/build.go b/components/cli/cli/command/image/build.go
index ef50a29..edb54ffb 100644
--- a/components/cli/cli/command/image/build.go
+++ b/components/cli/cli/command/image/build.go
@@ -66,6 +66,7 @@ type buildOptions struct {
 	cacheFrom      []string
 	compress       bool
 	securityOpt    []string
+	imgCryptOpt	[]string
 	networkMode    string
 	squash         bool
 	target         string
@@ -142,6 +143,7 @@ func NewBuildCommand(dockerCli command.Cli) *cobra.Command {
 	flags.SetAnnotation("compress", "no-buildkit", nil)
 
 	flags.StringSliceVar(&options.securityOpt, "security-opt", []string{}, "Security options")
+	flags.StringSliceVar(&options.imgCryptOpt, "imgcrypt-opt", []string{}, "Image Encryption options for SecureOverlay storage driver")
 	flags.StringVar(&options.networkMode, "network", "default", "Set the networking mode for the RUN instructions during build")
 	flags.SetAnnotation("network", "version", []string{"1.25"})
 	flags.Var(&options.extraHosts, "add-host", "Add a custom host-to-IP mapping (host:ip)")
@@ -647,6 +649,8 @@ func imageBuildOptions(dockerCli command.Cli, options buildOptions) types.ImageB
 		Labels:         opts.ConvertKVStringsToMap(options.labels.GetAll()),
 		CacheFrom:      options.cacheFrom,
 		SecurityOpt:    options.securityOpt,
+		//Added ImgCryptOpt to support secureoverlay2
+		ImgCryptOpt:    options.imgCryptOpt,
 		NetworkMode:    options.networkMode,
 		Squash:         options.squash,
 		ExtraHosts:     options.extraHosts.GetAll(),
diff --git a/components/cli/dockerfiles/Dockerfile.binary-native b/components/cli/dockerfiles/Dockerfile.binary-native
index bc60974..590c931 100644
--- a/components/cli/dockerfiles/Dockerfile.binary-native
+++ b/components/cli/dockerfiles/Dockerfile.binary-native
@@ -1,5 +1,8 @@
 FROM    golang:1.12.5-alpine
 
+ENV http_proxy "http://10.1.192.48:911"
+ENV https_proxy "http://10.1.192.48:911"
+
 RUN     apk add -U git bash coreutils gcc musl-dev
 
 ENV     CGO_ENABLED=0 \
diff --git a/components/cli/vendor/github.com/docker/docker/api/types/client.go b/components/cli/vendor/github.com/docker/docker/api/types/client.go
index 4b9f502..9b5da4a 100644
--- a/components/cli/vendor/github.com/docker/docker/api/types/client.go
+++ b/components/cli/vendor/github.com/docker/docker/api/types/client.go
@@ -177,6 +177,8 @@ type ImageBuildOptions struct {
 	// specified here do not need to have a valid parent chain to match cache.
 	CacheFrom   []string
 	SecurityOpt []string
+	//Added ImgCryptOpt to support secureoverlay2 - passes key information to the daemon
+	ImgCryptOpt  []string
 	ExtraHosts  []string // List of extra hosts
 	Target      string
 	SessionID   string
diff --git a/components/cli/vendor/github.com/docker/docker/api/types/container/host_config.go b/components/cli/vendor/github.com/docker/docker/api/types/container/host_config.go
index c3de3d9..6782a33 100644
--- a/components/cli/vendor/github.com/docker/docker/api/types/container/host_config.go
+++ b/components/cli/vendor/github.com/docker/docker/api/types/container/host_config.go
@@ -396,6 +396,7 @@ type HostConfig struct {
 	ReadonlyRootfs  bool              // Is the container root filesystem in read-only
 	SecurityOpt     []string          // List of string values to customize labels for MLS systems, such as SELinux.
 	StorageOpt      map[string]string `json:",omitempty"` // Storage driver options per container.
+	ImgCryptOpt     map[string]string `json:",omitempty"` //Added ImgCryptOpt to support secureoverlay2
 	Tmpfs           map[string]string `json:",omitempty"` // List of tmpfs (mounts) used for the container
 	UTSMode         UTSMode           // UTS namespace to use for the container
 	UsernsMode      UsernsMode        // The user namespace to use for the container
diff --git a/components/cli/vendor/github.com/docker/docker/client/image_build.go b/components/cli/vendor/github.com/docker/docker/client/image_build.go
index 8fcf995..42cf028 100644
--- a/components/cli/vendor/github.com/docker/docker/client/image_build.go
+++ b/components/cli/vendor/github.com/docker/docker/client/image_build.go
@@ -116,6 +116,13 @@ func (cli *Client) imageBuildOptionsToQuery(options types.ImageBuildOptions) (ur
 	}
 	query.Set("labels", string(labelsJSON))
 
+	//Added ImgCryptOpt to support secureoverlay2 - passes key information to the daemon
+	imgCryptOpt, err := json.Marshal(options.ImgCryptOpt)
+        if err != nil {
+                return query, err
+        }
+        query.Set("imgcryptopt", string(imgCryptOpt))
+
 	cacheFromJSON, err := json.Marshal(options.CacheFrom)
 	if err != nil {
 		return query, err
diff --git a/components/engine/Dockerfile b/components/engine/Dockerfile
index d563fab..1e365bf 100644
--- a/components/engine/Dockerfile
+++ b/components/engine/Dockerfile
@@ -27,6 +27,11 @@
 ARG CROSS="false"
 
 FROM golang:1.12.5 AS base
+
+ENV http_proxy "http://10.1.192.48:911"
+ENV https_proxy "http://10.1.192.48:911"
+
+
 # allow replacing httpredir or deb mirror
 ARG APT_MIRROR=deb.debian.org
 RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
diff --git a/components/engine/api/server/router/build/build_routes.go b/components/engine/api/server/router/build/build_routes.go
index 57d9fc8..1146c68 100644
--- a/components/engine/api/server/router/build/build_routes.go
+++ b/components/engine/api/server/router/build/build_routes.go
@@ -73,7 +73,7 @@ func newImageBuildOptions(ctx context.Context, r *http.Request) (*types.ImageBui
 	if versions.GreaterThanOrEqualTo(version, "1.32") {
 		options.Platform = r.FormValue("platform")
 	}
-
+	
 	if r.Form.Get("shmsize") != "" {
 		shmSize, err := strconv.ParseInt(r.Form.Get("shmsize"), 10, 64)
 		if err != nil {
@@ -132,6 +132,15 @@ func newImageBuildOptions(ctx context.Context, r *http.Request) (*types.ImageBui
 		options.Labels = labels
 	}
 
+	//Added ImgCryptOpt to support secureoverlay2 - passes key information to the daemon
+	imgCryptOpt := r.FormValue("imgcryptopt")
+	if imgCryptOpt != "" {
+                  var imgcryptopt = []string{}
+                  if err := json.Unmarshal([]byte(imgCryptOpt), &imgcryptopt); err != nil {
+                         return nil, errors.Wrap(errdefs.InvalidParameter(err), "error reading img crypt opts")
+                 }
+               options.ImgCryptOpt = imgcryptopt
+        }
 	cacheFromJSON := r.FormValue("cachefrom")
 	if cacheFromJSON != "" {
 		var cacheFrom = []string{}
@@ -259,7 +268,6 @@ func (br *buildRouter) postBuild(ctx context.Context, w http.ResponseWriter, r *
 		return errf(err)
 	}
 	buildOptions.AuthConfigs = getAuthConfigs(r.Header)
-
 	if buildOptions.Squash && !br.daemon.HasExperimental() {
 		return errdefs.InvalidParameter(errors.New("squash is only supported with experimental mode"))
 	}
diff --git a/components/engine/api/types/client.go b/components/engine/api/types/client.go
index 4b9f502..9b5da4a 100644
--- a/components/engine/api/types/client.go
+++ b/components/engine/api/types/client.go
@@ -177,6 +177,8 @@ type ImageBuildOptions struct {
 	// specified here do not need to have a valid parent chain to match cache.
 	CacheFrom   []string
 	SecurityOpt []string
+	//Added ImgCryptOpt to support secureoverlay2 - passes key information to the daemon
+	ImgCryptOpt  []string
 	ExtraHosts  []string // List of extra hosts
 	Target      string
 	SessionID   string
diff --git a/components/engine/api/types/container/host_config.go b/components/engine/api/types/container/host_config.go
index c3de3d9..e729488 100644
--- a/components/engine/api/types/container/host_config.go
+++ b/components/engine/api/types/container/host_config.go
@@ -396,6 +396,7 @@ type HostConfig struct {
 	ReadonlyRootfs  bool              // Is the container root filesystem in read-only
 	SecurityOpt     []string          // List of string values to customize labels for MLS systems, such as SELinux.
 	StorageOpt      map[string]string `json:",omitempty"` // Storage driver options per container.
+        ImgCryptOpt     map[string]string `json:",omitempty"` //Added ImgCryptOpt to support secureoverlay2
 	Tmpfs           map[string]string `json:",omitempty"` // List of tmpfs (mounts) used for the container
 	UTSMode         UTSMode           // UTS namespace to use for the container
 	UsernsMode      UsernsMode        // The user namespace to use for the container
diff --git a/components/engine/builder/builder.go b/components/engine/builder/builder.go
index cf4d737..87c7063 100644
--- a/components/engine/builder/builder.go
+++ b/components/engine/builder/builder.go
@@ -104,6 +104,7 @@ type Image interface {
 type ROLayer interface {
 	Release() error
 	NewRWLayer() (RWLayer, error)
+	NewRWLayerSecureCopy(reqLayerOpts *layer.CreateRWLayerOpts) (RWLayer, error)
 	DiffID() layer.DiffID
 }
 
diff --git a/components/engine/builder/dockerfile/imagecontext.go b/components/engine/builder/dockerfile/imagecontext.go
index 08cb396..f61bc28 100644
--- a/components/engine/builder/dockerfile/imagecontext.go
+++ b/components/engine/builder/dockerfile/imagecontext.go
@@ -6,6 +6,7 @@ import (
 
 	"github.com/docker/docker/api/types/backend"
 	"github.com/docker/docker/builder"
+	"github.com/docker/docker/layer"
 	dockerimage "github.com/docker/docker/image"
 	specs "github.com/opencontainers/image-spec/specs-go/v1"
 	"github.com/pkg/errors"
@@ -117,6 +118,10 @@ func (im *imageMount) NewRWLayer() (builder.RWLayer, error) {
 	return im.layer.NewRWLayer()
 }
 
+func (im *imageMount) NewRWLayerSecureCopy(l *layer.CreateRWLayerOpts) (builder.RWLayer, error) {
+        return im.layer.NewRWLayerSecureCopy(l)
+}
+
 func (im *imageMount) ImageID() string {
 	return im.image.ImageID()
 }
diff --git a/components/engine/builder/dockerfile/internals.go b/components/engine/builder/dockerfile/internals.go
index fa35c4f..ed4a0fa 100644
--- a/components/engine/builder/dockerfile/internals.go
+++ b/components/engine/builder/dockerfile/internals.go
@@ -19,6 +19,7 @@ import (
 	"github.com/docker/docker/api/types/container"
 	"github.com/docker/docker/builder"
 	"github.com/docker/docker/image"
+	"github.com/docker/docker/layer"
 	"github.com/docker/docker/pkg/archive"
 	"github.com/docker/docker/pkg/chrootarchive"
 	"github.com/docker/docker/pkg/containerfs"
@@ -174,7 +175,10 @@ func (b *Builder) performCopy(req dispatchRequest, inst copyInstruction) error {
 		return errors.Wrapf(err, "failed to get destination image %q", state.imageID)
 	}
 
-	rwLayer, err := imageMount.NewRWLayer()
+	rwlOpts := layer.CreateRWLayerOpts{
+		ImgCryptOpt: getImgCryptOpts(b.options),
+	}
+	rwLayer, err := imageMount.NewRWLayerSecureCopy(&rwlOpts)
 	if err != nil {
 		return err
 	}
@@ -455,6 +459,25 @@ func (b *Builder) create(runConfig *container.Config) (string, error) {
 	return container.ID, nil
 }
 
+
+//Added back to support storage opt for secureoverlay2
+func  getImgCryptOpts(options *types.ImageBuildOptions) (map[string]string) {
+       imgCryptOpts := make(map[string]string)
+        // parse storage options
+        for _, val := range options.ImgCryptOpt {
+         if strings.Contains(val, "=") {
+                       opt := strings.SplitN(val, "=", 2)
+                       imgCryptOpts[opt[0]] = opt[1]
+         } else if strings.Contains(val, ":") {
+                 opt := strings.SplitN(val, ":", 2)
+                 imgCryptOpts[opt[0]] = opt[1]
+         } else {
+                logrus.Debugf("[BUILDER] getImgCryptOpts: ignoring imgCryptOpts argument %s", val)
+         }
+        }
+        return imgCryptOpts
+}
+
 func hostConfigFromOptions(options *types.ImageBuildOptions, isWCOW bool) *container.HostConfig {
 	resources := container.Resources{
 		CgroupParent: options.CgroupParent,
@@ -468,6 +491,8 @@ func hostConfigFromOptions(options *types.ImageBuildOptions, isWCOW bool) *conta
 		Ulimits:      options.Ulimits,
 	}
 
+	//Added ImgCryptOpt to support secureoverlay2 - passes key information to the daemon
+	imgCryptOpt := getImgCryptOpts(options)
 	hc := &container.HostConfig{
 		SecurityOpt: options.SecurityOpt,
 		Isolation:   options.Isolation,
@@ -477,6 +502,7 @@ func hostConfigFromOptions(options *types.ImageBuildOptions, isWCOW bool) *conta
 		// Set a log config to override any default value set on the daemon
 		LogConfig:  defaultLogConfig,
 		ExtraHosts: options.ExtraHosts,
+		ImgCryptOpt: imgCryptOpt,
 	}
 
 	// For WCOW, the default of 20GB hard-coded in the platform
diff --git a/components/engine/builder/dockerfile/mockbackend_test.go b/components/engine/builder/dockerfile/mockbackend_test.go
index d4526ea..9025fbe 100644
--- a/components/engine/builder/dockerfile/mockbackend_test.go
+++ b/components/engine/builder/dockerfile/mockbackend_test.go
@@ -146,3 +146,7 @@ func (l *mockRWLayer) Commit() (builder.ROLayer, error) {
 func (l *mockRWLayer) Root() containerfs.ContainerFS {
 	return nil
 }
+
+func (l *mockLayer) NewRWLayerSecureCopy(opts *layer.CreateRWLayerOpts) (builder.RWLayer, error) {
+        return &mockRWLayer{}, nil
+}
diff --git a/components/engine/daemon/create.go b/components/engine/daemon/create.go
index f9db0ca..b9c847f 100644
--- a/components/engine/daemon/create.go
+++ b/components/engine/daemon/create.go
@@ -169,6 +169,7 @@ func (daemon *Daemon) create(opts createOpts) (retC *container.Container, retErr
 	}
 
 	container.HostConfig.StorageOpt = opts.params.HostConfig.StorageOpt
+	container.HostConfig.ImgCryptOpt = opts.params.HostConfig.ImgCryptOpt
 
 	// Fixes: https://github.com/moby/moby/issues/34074 and
 	// https://github.com/docker/for-win/issues/999.
diff --git a/components/engine/daemon/graphdriver/driver.go b/components/engine/daemon/graphdriver/driver.go
index 44434f7..9d8e5be 100644
--- a/components/engine/daemon/graphdriver/driver.go
+++ b/components/engine/daemon/graphdriver/driver.go
@@ -34,6 +34,7 @@ var (
 type CreateOpts struct {
 	MountLabel string
 	StorageOpt map[string]string
+	ImgCryptOpt map[string]string
 }
 
 // InitFunc initializes the storage driver.
diff --git a/components/engine/daemon/graphdriver/driver_linux.go b/components/engine/daemon/graphdriver/driver_linux.go
index 61c6b24..2f6c319 100644
--- a/components/engine/daemon/graphdriver/driver_linux.go
+++ b/components/engine/daemon/graphdriver/driver_linux.go
@@ -48,7 +48,7 @@ const (
 
 var (
 	// List of drivers that should be used in an order
-	priority = "btrfs,zfs,overlay2,aufs,overlay,devicemapper,vfs"
+	priority = "btrfs,zfs,overlay2,aufs,overlay,devicemapper,vfs,secureoverlay2"
 
 	// FsNames maps filesystem id to name of the filesystem.
 	FsNames = map[FsMagic]string{
diff --git a/components/engine/daemon/images/image_builder.go b/components/engine/daemon/images/image_builder.go
index cdf951c..dc48f7b 100644
--- a/components/engine/daemon/images/image_builder.go
+++ b/components/engine/daemon/images/image_builder.go
@@ -17,6 +17,7 @@ import (
 	"github.com/docker/docker/registry"
 	specs "github.com/opencontainers/image-spec/specs-go/v1"
 	"github.com/pkg/errors"
+	"github.com/sirupsen/logrus"
 )
 
 type roLayer struct {
@@ -48,7 +49,35 @@ func (l *roLayer) Release() error {
 	return nil
 }
 
+func (l *roLayer) NewRWLayerSecureCopy(reqLayerOpts *layer.CreateRWLayerOpts) (builder.RWLayer, error) {
+        logrus.Debug("NewRWLayer")
+        var chainID layer.ChainID
+        if l.roLayer != nil {
+                chainID = l.roLayer.ChainID()
+        }
+
+        mountID := stringid.GenerateRandomID()
+        newLayer, err := l.layerStore.CreateRWLayer(mountID, chainID, reqLayerOpts)
+        if err != nil {
+                return nil, errors.Wrap(err, "failed to create rwlayer")
+        }
+
+        rwLayer := &rwLayer{layerStore: l.layerStore, rwLayer: newLayer}
+
+        fs, err := newLayer.Mount("")
+        if err != nil {
+                rwLayer.Release()
+                return nil, err
+        }
+
+        rwLayer.fs = fs
+
+        return rwLayer, nil
+}
+
+
 func (l *roLayer) NewRWLayer() (builder.RWLayer, error) {
+	logrus.Debug("NewRWLayer")
 	var chainID layer.ChainID
 	if l.roLayer != nil {
 		chainID = l.roLayer.ChainID()
@@ -85,6 +114,7 @@ func (l *rwLayer) Root() containerfs.ContainerFS {
 }
 
 func (l *rwLayer) Commit() (builder.ROLayer, error) {
+	logrus.Debug("builder")
 	stream, err := l.rwLayer.TarStream()
 	if err != nil {
 		return nil, err
diff --git a/components/engine/daemon/images/service.go b/components/engine/daemon/images/service.go
index e8df5cb..98b9bab 100644
--- a/components/engine/daemon/images/service.go
+++ b/components/engine/daemon/images/service.go
@@ -126,6 +126,7 @@ func (i *ImageService) CreateLayer(container *container.Container, initFunc laye
 		MountLabel: container.MountLabel,
 		InitFunc:   initFunc,
 		StorageOpt: container.HostConfig.StorageOpt,
+		ImgCryptOpt: container.HostConfig.ImgCryptOpt,
 	}
 
 	// Indexing by OS is safe here as validation of OS has already been performed in create() (the only
diff --git a/components/engine/layer/layer.go b/components/engine/layer/layer.go
index d0c7fa8..524e24e 100644
--- a/components/engine/layer/layer.go
+++ b/components/engine/layer/layer.go
@@ -175,6 +175,7 @@ type CreateRWLayerOpts struct {
 	MountLabel string
 	InitFunc   MountInit
 	StorageOpt map[string]string
+	ImgCryptOpt map[string]string
 }
 
 // Store represents a backend for managing both
diff --git a/components/engine/layer/layer_store.go b/components/engine/layer/layer_store.go
index 81730e9..0357ca4 100644
--- a/components/engine/layer/layer_store.go
+++ b/components/engine/layer/layer_store.go
@@ -488,6 +488,7 @@ func (ls *layerStore) Release(l Layer) ([]Metadata, error) {
 func (ls *layerStore) CreateRWLayer(name string, parent ChainID, opts *CreateRWLayerOpts) (_ RWLayer, err error) {
 	var (
 		storageOpt map[string]string
+		imgCryptOpt map[string]string
 		initFunc   MountInit
 		mountLabel string
 	)
@@ -495,6 +496,7 @@ func (ls *layerStore) CreateRWLayer(name string, parent ChainID, opts *CreateRWL
 	if opts != nil {
 		mountLabel = opts.MountLabel
 		storageOpt = opts.StorageOpt
+		imgCryptOpt = opts.ImgCryptOpt
 		initFunc = opts.InitFunc
 	}
 
@@ -536,7 +538,7 @@ func (ls *layerStore) CreateRWLayer(name string, parent ChainID, opts *CreateRWL
 	}
 
 	if initFunc != nil {
-		pid, err = ls.initMount(m.mountID, pid, mountLabel, initFunc, storageOpt)
+		pid, err = ls.initMount(m.mountID, pid, mountLabel, initFunc, storageOpt, imgCryptOpt)
 		if err != nil {
 			return
 		}
@@ -545,6 +547,7 @@ func (ls *layerStore) CreateRWLayer(name string, parent ChainID, opts *CreateRWL
 
 	createOpts := &graphdriver.CreateOpts{
 		StorageOpt: storageOpt,
+		ImgCryptOpt: imgCryptOpt,
 	}
 
 	if err = ls.driver.CreateReadWrite(m.mountID, pid, createOpts); err != nil {
@@ -661,7 +664,7 @@ func (ls *layerStore) saveMount(mount *mountedLayer) error {
 	return nil
 }
 
-func (ls *layerStore) initMount(graphID, parent, mountLabel string, initFunc MountInit, storageOpt map[string]string) (string, error) {
+func (ls *layerStore) initMount(graphID, parent, mountLabel string, initFunc MountInit, storageOpt map[string]string, imgCryptOpt map[string]string) (string, error) {
 	// Use "<graph-id>-init" to maintain compatibility with graph drivers
 	// which are expecting this layer with this special name. If all
 	// graph drivers can be updated to not rely on knowing about this layer
@@ -671,6 +674,7 @@ func (ls *layerStore) initMount(graphID, parent, mountLabel string, initFunc Mou
 	createOpts := &graphdriver.CreateOpts{
 		MountLabel: mountLabel,
 		StorageOpt: storageOpt,
+		ImgCryptOpt: imgCryptOpt,
 	}
 
 	if err := ls.driver.CreateReadWrite(initID, parent, createOpts); err != nil {
